package com.rafamv.bygoneage.client.renderer.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;
import thehippomaster.AnimationAPI.IAnimatedEntity;
import thehippomaster.AnimationAPI.client.Animator;

import com.rafamv.bygoneage.client.renderer.ResettableModelRenderer;
import com.rafamv.bygoneage.entity.EntityBygoneAgeCreature;
import com.rafamv.bygoneage.enums.BygoneAgeAnimationIDs;

public class ModelDeinotherium extends ModelBase {

	private Animator animator;
	public static final float PI = (float) Math.PI;
	ResettableModelRenderer tailHair2, tailHair1, tail3, tail2, tail1, body1, body2, legFrontLeft1, legFrontLeft2, legFrontRight1, legFrontRight2, legBackLeft1, legBackLeft2, legBackRight1, legBackRight2, neck, head1, head2, mouth1, mouth2, mouthLeft, mouthRight, tuskLeft1, tuskLeft2, tuskRight1,
			tuskRight2, trunk1, trunk2, trunk3, trunk4, trunk5, earLeft, earRight;

	public ModelDeinotherium() {
		animator = new Animator(this);
		textureWidth = 512;
		textureHeight = 256;

		tailHair2 = new ResettableModelRenderer(this, 300, 16);
		tailHair2.addBox(-2F, 0F, 0F, 4, 0, 8);
		tailHair2.setRotationPoint(0F, -4F, 52F);
		tailHair2.setTextureSize(512, 256);
		tailHair2.mirror = true;
		setRotation(tailHair2, -1.308997F, 0F, 0F);
		tailHair1 = new ResettableModelRenderer(this, 304, 16);
		tailHair1.addBox(0F, -2F, 0F, 0, 4, 8);
		tailHair1.setRotationPoint(0F, -4F, 52F);
		tailHair1.setTextureSize(512, 256);
		tailHair1.mirror = true;
		setRotation(tailHair1, -1.308997F, 0F, 0F);
		tail3 = new ResettableModelRenderer(this, 330, 6);
		tail3.addBox(-1F, -1F, -0.5F, 2, 2, 6);
		tail3.setRotationPoint(0F, -4F, 52F);
		tail3.setTextureSize(512, 256);
		tail3.mirror = true;
		setRotation(tail3, -1.308997F, 0F, 0F);
		tail2 = new ResettableModelRenderer(this, 300, 0);
		tail2.addBox(-1F, -1F, 0F, 2, 2, 12);
		tail2.setRotationPoint(0F, -16F, 51.8F);
		tail2.setTextureSize(512, 256);
		tail2.mirror = true;
		setRotation(tail2, -1.570796F, 0F, 0F);
		tail1 = new ResettableModelRenderer(this, 300, 0);
		tail1.addBox(-1F, -1F, -2F, 2, 2, 12);
		tail1.setRotationPoint(0F, -24F, 47F);
		tail1.setTextureSize(512, 256);
		tail1.mirror = true;
		setRotation(tail1, -1.047198F, 0F, 0F);
		body1 = new ResettableModelRenderer(this, 0, 0);
		body1.addBox(-15F, -2F, 0F, 30, 32, 58);
		body1.setRotationPoint(0F, -27F, -11F);
		body1.setTextureSize(512, 256);
		body1.mirror = true;
		setRotation(body1, 0F, 0F, 0F);
		body2 = new ResettableModelRenderer(this, 180, 0);
		body2.addBox(-14F, -6F, -5F, 28, 28, 60);
		body2.setRotationPoint(0F, -27F, -9F);
		body2.setTextureSize(512, 256);
		body2.mirror = true;
		setRotation(body2, -0.0698132F, 0F, 0F);
		legFrontLeft1 = new ResettableModelRenderer(this, 0, 100);
		legFrontLeft1.addBox(-5F, -10F, -9F, 12, 30, 20);
		legFrontLeft1.setRotationPoint(15F, -20F, -4F);
		legFrontLeft1.setTextureSize(512, 256);
		legFrontLeft1.mirror = true;
		setRotation(legFrontLeft1, 0F, 0F, 0F);
		legFrontLeft2 = new ResettableModelRenderer(this, 0, 150);
		legFrontLeft2.addBox(-4.5F, -6F, -6F, 9, 30, 12);
		legFrontLeft2.setRotationPoint(15F, 0F, -6F);
		legFrontLeft2.setTextureSize(512, 256);
		legFrontLeft2.mirror = true;
		setRotation(legFrontLeft2, 0F, 0F, 0F);
		legFrontRight1 = new ResettableModelRenderer(this, 70, 100);
		legFrontRight1.addBox(-6F, -10F, -9F, 12, 30, 20);
		legFrontRight1.setRotationPoint(-15F, -20F, -4F);
		legFrontRight1.setTextureSize(512, 256);
		legFrontRight1.mirror = true;
		setRotation(legFrontRight1, 0F, 0F, 0F);
		legFrontRight2 = new ResettableModelRenderer(this, 70, 150);
		legFrontRight2.addBox(-4.5F, -6F, -6F, 9, 30, 12);
		legFrontRight2.setRotationPoint(-15F, 0F, -6F);
		legFrontRight2.setTextureSize(512, 256);
		legFrontRight2.mirror = true;
		setRotation(legFrontRight2, 0F, 0F, 0F);
		legBackLeft1 = new ResettableModelRenderer(this, 210, 100);
		legBackLeft1.addBox(-6F, -4F, -11F, 10, 30, 20);
		legBackLeft1.setRotationPoint(15F, -22F, 36F);
		legBackLeft1.setTextureSize(512, 256);
		legBackLeft1.mirror = true;
		setRotation(legBackLeft1, -0.2617994F, 0F, 0F);
		legBackLeft2 = new ResettableModelRenderer(this, 210, 150);
		legBackLeft2.addBox(-6F, -4F, -5.5F, 8, 30, 11);
		legBackLeft2.setRotationPoint(16F, -2F, 28F);
		legBackLeft2.setTextureSize(512, 256);
		legBackLeft2.mirror = true;
		setRotation(legBackLeft2, 0F, 0F, 0F);
		legBackRight1 = new ResettableModelRenderer(this, 140, 100);
		legBackRight1.addBox(-4F, -4F, -11F, 10, 30, 20);
		legBackRight1.setRotationPoint(-15F, -22F, 36F);
		legBackRight1.setTextureSize(512, 256);
		legBackRight1.mirror = true;
		setRotation(legBackRight1, -0.2617994F, 0F, 0F);
		legBackRight2 = new ResettableModelRenderer(this, 140, 150);
		legBackRight2.addBox(-2F, -4F, -5.5F, 8, 30, 11);
		legBackRight2.setRotationPoint(-16F, -2F, 28F);
		legBackRight2.setTextureSize(512, 256);
		legBackRight2.mirror = true;
		setRotation(legBackRight2, 0F, 0F, 0F);
		neck = new ResettableModelRenderer(this, 122, 0);
		neck.addBox(-8.5F, -6F, -6F, 17, 17, 10);
		neck.setRotationPoint(0F, -26F, -14F);
		neck.setTextureSize(512, 256);
		neck.mirror = true;
		setRotation(neck, 0F, 0F, 0F);
		head1 = new ResettableModelRenderer(this, 360, 0);
		head1.addBox(-10.5F, -7F, -17F, 21, 15, 20);
		head1.setRotationPoint(0F, -26F, -20F);
		head1.setTextureSize(512, 256);
		head1.mirror = true;
		setRotation(head1, 0.0872665F, 0F, 0F);
		head2 = new ResettableModelRenderer(this, 360, 35);
		head2.addBox(-8.5F, -9.5F, -23F, 17, 15, 8);
		head2.setRotationPoint(0F, -26F, -20F);
		head2.setTextureSize(512, 256);
		head2.mirror = true;
		setRotation(head2, 0.2617994F, 0F, 0F);
		mouth1 = new ResettableModelRenderer(this, 280, 100);
		mouth1.addBox(-9F, 6.5F, -16.5F, 18, 6, 16);
		mouth1.setRotationPoint(0F, -26F, -20F);
		mouth1.setTextureSize(512, 256);
		mouth1.mirror = true;
		setRotation(mouth1, 0.1745329F, 0F, 0F);
		mouth2 = new ResettableModelRenderer(this, 280, 122);
		mouth2.addBox(-8F, -2.5F, -22.5F, 16, 6, 5);
		mouth2.setRotationPoint(0F, -26F, -20F);
		mouth2.setTextureSize(512, 256);
		mouth2.mirror = true;
		setRotation(mouth2, 0.6981317F, 0F, 0F);
		mouthLeft = new ResettableModelRenderer(this, 310, 133);
		mouthLeft.addBox(2.5F, 15.5F, -16.5F, 6, 7, 5);
		mouthLeft.setRotationPoint(0F, -26F, -20F);
		mouthLeft.setTextureSize(512, 256);
		mouthLeft.mirror = true;
		setRotation(mouthLeft, -0.1745329F, 0F, 0F);
		mouthRight = new ResettableModelRenderer(this, 280, 133);
		mouthRight.addBox(-8.5F, 15.5F, -16.5F, 6, 7, 5);
		mouthRight.setRotationPoint(0F, -26F, -20F);
		mouthRight.setTextureSize(512, 256);
		mouthRight.mirror = true;
		setRotation(mouthRight, -0.1745329F, 0F, 0F);
		tuskLeft1 = new ResettableModelRenderer(this, 310, 145);
		tuskLeft1.addBox(3F, 13F, -24F, 4, 4, 4);
		tuskLeft1.setRotationPoint(0F, -26F, -20F);
		tuskLeft1.setTextureSize(512, 256);
		tuskLeft1.mirror = true;
		setRotation(tuskLeft1, 0.2617994F, 0F, 0F);
		tuskLeft2 = new ResettableModelRenderer(this, 310, 153);
		tuskLeft2.addBox(3.5F, 17F, -23.5F, 3, 6, 3);
		tuskLeft2.setRotationPoint(0F, -26F, -20F);
		tuskLeft2.setTextureSize(512, 256);
		tuskLeft2.mirror = true;
		setRotation(tuskLeft2, 0.2617994F, 0F, 0F);
		tuskRight1 = new ResettableModelRenderer(this, 280, 145);
		tuskRight1.addBox(-7F, 13F, -24F, 4, 4, 4);
		tuskRight1.setRotationPoint(0F, -26F, -20F);
		tuskRight1.setTextureSize(512, 256);
		tuskRight1.mirror = true;
		setRotation(tuskRight1, 0.2617994F, 0F, 0F);
		tuskRight2 = new ResettableModelRenderer(this, 280, 153);
		tuskRight2.addBox(-6.5F, 17F, -23.5F, 3, 6, 3);
		tuskRight2.setRotationPoint(0F, -26F, -20F);
		tuskRight2.setTextureSize(512, 256);
		tuskRight2.mirror = true;
		setRotation(tuskRight2, 0.2617994F, 0F, 0F);
		trunk1 = new ResettableModelRenderer(this, 360, 58);
		trunk1.addBox(-7F, -20.5F, -21F, 14, 12, 8);
		trunk1.setRotationPoint(0F, -26F, -20F);
		trunk1.setTextureSize(512, 256);
		trunk1.mirror = true;
		setRotation(trunk1, 0.8726646F, 0F, 0F);
		trunk2 = new ResettableModelRenderer(this, 360, 78);
		trunk2.addBox(-6F, -24.5F, -25F, 12, 10, 10);
		trunk2.setRotationPoint(0F, -26F, -20F);
		trunk2.setTextureSize(512, 256);
		trunk2.mirror = true;
		setRotation(trunk2, 1.134464F, 0F, 0F);
		trunk3 = new ResettableModelRenderer(this, 360, 98);
		trunk3.addBox(-5F, -29.5F, -25F, 10, 8, 8);
		trunk3.setRotationPoint(0F, -26F, -20F);
		trunk3.setTextureSize(512, 256);
		trunk3.mirror = true;
		setRotation(trunk3, 1.396263F, 0F, 0F);
		trunk4 = new ResettableModelRenderer(this, 360, 114);
		trunk4.addBox(-4F, -33F, -27F, 8, 7, 8);
		trunk4.setRotationPoint(0F, -26F, -20F);
		trunk4.setTextureSize(512, 256);
		trunk4.mirror = true;
		setRotation(trunk4, 1.570796F, 0F, 0F);
		trunk5 = new ResettableModelRenderer(this, 360, 129);
		trunk5.addBox(-3F, -39.5F, -23.5F, 6, 5, 10);
		trunk5.setRotationPoint(0F, -26F, -20F);
		trunk5.setTextureSize(512, 256);
		trunk5.mirror = true;
		setRotation(trunk5, 1.919862F, 0F, 0F);
		earLeft = new ResettableModelRenderer(this, 420, 100);
		earLeft.addBox(10F, -3F, -1F, 2, 12, 8);
		earLeft.setRotationPoint(0F, -26F, -20F);
		earLeft.setTextureSize(512, 256);
		earLeft.mirror = true;
		setRotation(earLeft, 0F, 0.2617994F, -0.0872665F);
		earRight = new ResettableModelRenderer(this, 420, 130);
		earRight.addBox(-12F, -3F, 0F, 2, 12, 8);
		earRight.setRotationPoint(0F, -26F, -20F);
		earRight.setTextureSize(512, 256);
		earRight.mirror = true;
		setRotation(earRight, 0F, -0.2617994F, 0.0872665F);

		tailHair2.savefirstParameters();
		tailHair1.savefirstParameters();
		tail3.savefirstParameters();
		tail2.savefirstParameters();
		tail1.savefirstParameters();
		body1.savefirstParameters();
		body2.savefirstParameters();
		legFrontLeft1.savefirstParameters();
		legFrontLeft2.savefirstParameters();
		legFrontRight1.savefirstParameters();
		legFrontRight2.savefirstParameters();
		legBackLeft1.savefirstParameters();
		legBackLeft2.savefirstParameters();
		legBackRight1.savefirstParameters();
		legBackRight2.savefirstParameters();
		neck.savefirstParameters();
		head1.savefirstParameters();
		head2.savefirstParameters();
		mouth1.savefirstParameters();
		mouth2.savefirstParameters();
		mouthLeft.savefirstParameters();
		mouthRight.savefirstParameters();
		tuskLeft1.savefirstParameters();
		tuskLeft2.savefirstParameters();
		tuskRight1.savefirstParameters();
		tuskRight2.savefirstParameters();
		trunk1.savefirstParameters();
		trunk2.savefirstParameters();
		trunk3.savefirstParameters();
		trunk4.savefirstParameters();
		trunk5.savefirstParameters();
		earLeft.savefirstParameters();
		earRight.savefirstParameters();
	}

	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
		super.render(entity, f, f1, f2, f3, f4, f5);
		animate(entity, f, f1, f2, f3, f4, f5);

		tailHair2.render(f5);
		tailHair1.render(f5);
		tail3.render(f5);
		tail2.render(f5);
		tail1.render(f5);
		body1.render(f5);
		body2.render(f5);
		legFrontLeft1.render(f5);
		legFrontLeft2.render(f5);
		legFrontRight1.render(f5);
		legFrontRight2.render(f5);
		legBackLeft1.render(f5);
		legBackLeft2.render(f5);
		legBackRight1.render(f5);
		legBackRight2.render(f5);
		neck.render(f5);
		head1.render(f5);
		head2.render(f5);
		trunk1.render(f5);
		trunk2.render(f5);
		trunk3.render(f5);
		trunk4.render(f5);
		trunk5.render(f5);
		earLeft.render(f5);
		earRight.render(f5);
		mouth1.render(f5);
		if (((EntityBygoneAgeCreature) entity).isCreatureAdult()) {
			mouth2.render(f5);
			mouthLeft.render(f5);
			mouthRight.render(f5);
			tuskLeft1.render(f5);
			tuskLeft2.render(f5);
			tuskRight1.render(f5);
			tuskRight2.render(f5);
		} else if (((EntityBygoneAgeCreature) entity).isCreatureHalfAdult()) {
			mouth2.render(f5);
			mouthLeft.render(f5);
			mouthRight.render(f5);
			tuskLeft1.render(f5);
			tuskRight1.render(f5);
		}
	}

	private void setRotation(ResettableModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity) {
		super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);

		float headRotationX = f4 / (270F / this.PI);
		float headRotationY = f3 / (235F / this.PI);
		float naturalTrunkMovement = MathHelper.cos(0.05F * f2);
		float naturalMouthMovement = MathHelper.cos(0.01F * f2);
		float tailNaturalMovement = 0.05F * MathHelper.cos(0.1F * f2);
		float legsMovement1 = f1 * MathHelper.cos(f * 0.5F);
		float legsMovement2 = f1 * MathHelper.cos(f * 0.5F + this.PI);

		body1.rotateAngleX = body1.firstRotateAngleX;
		body2.rotateAngleX = body2.firstRotateAngleX;
		neck.rotateAngleX = neck.firstRotateAngleX;

		head1.rotateAngleX = headRotationX + head1.firstRotateAngleX;
		head2.rotateAngleX = headRotationX + head2.firstRotateAngleX;
		mouth1.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + mouth1.firstRotateAngleX;
		mouth2.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + mouth2.firstRotateAngleX;
		mouthLeft.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + mouthLeft.firstRotateAngleX;
		mouthRight.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + mouthRight.firstRotateAngleX;
		tuskLeft1.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + tuskLeft1.firstRotateAngleX;
		tuskLeft2.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + tuskLeft2.firstRotateAngleX;
		tuskRight1.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + tuskRight1.firstRotateAngleX;
		tuskRight2.rotateAngleX = headRotationX + naturalMouthMovement / 10.0F + tuskRight2.firstRotateAngleX;
		trunk1.rotateAngleX = headRotationX + 0.02F * naturalTrunkMovement + trunk1.firstRotateAngleX;
		trunk2.rotateAngleX = headRotationX + 0.04F * naturalTrunkMovement + trunk2.firstRotateAngleX;
		trunk3.rotateAngleX = headRotationX + 0.06F * naturalTrunkMovement + trunk3.firstRotateAngleX;
		trunk4.rotateAngleX = headRotationX + 0.08F * naturalTrunkMovement + trunk4.firstRotateAngleX;
		trunk5.rotateAngleX = headRotationX + 0.10F * naturalTrunkMovement + trunk5.firstRotateAngleX;
		earLeft.rotateAngleX = headRotationX + earLeft.firstRotateAngleX;
		earRight.rotateAngleX = headRotationX + earRight.firstRotateAngleX;

		head1.rotateAngleY = headRotationY;
		head2.rotateAngleY = headRotationY;
		earLeft.rotateAngleY = headRotationY;
		earRight.rotateAngleY = headRotationY;
		mouth1.rotateAngleY = headRotationY;
		mouth2.rotateAngleY = headRotationY;
		mouthLeft.rotateAngleY = headRotationY;
		mouthRight.rotateAngleY = headRotationY;
		tuskLeft1.rotateAngleY = headRotationY;
		tuskLeft2.rotateAngleY = headRotationY;
		tuskRight1.rotateAngleY = headRotationY;
		tuskRight2.rotateAngleY = headRotationY;
		earRight.rotateAngleY = headRotationY;
		earRight.rotateAngleY = headRotationY;
		trunk1.rotateAngleY = headRotationY;
		trunk2.rotateAngleY = headRotationY;
		trunk3.rotateAngleY = headRotationY;
		trunk4.rotateAngleY = headRotationY;
		trunk5.rotateAngleY = headRotationY;

		earLeft.rotateAngleZ = earLeft.firstRotateAngleZ;
		earRight.rotateAngleZ = earRight.firstRotateAngleZ;

		legFrontLeft1.rotateAngleX = legsMovement2 + legFrontLeft1.firstRotateAngleX;
		legFrontLeft2.pinLegPlaneYZ(legFrontLeft1, 20.09975F, legFrontLeft1.rotateAngleX);
		legFrontLeft2.rotateAngleX = legsMovement2 / 2.0F + legFrontLeft2.firstRotateAngleX;

		legFrontRight1.rotateAngleX = legsMovement1 + legFrontRight1.firstRotateAngleX;
		legFrontRight2.pinLegPlaneYZ(legFrontRight1, 20.09975F, legFrontRight1.rotateAngleX);
		legFrontRight2.rotateAngleX = legsMovement1 / 2.0F + legFrontRight2.firstRotateAngleX;

		legBackRight1.rotateAngleX = legsMovement2 + legBackRight1.firstRotateAngleX;
		legBackRight2.pinLegPlaneYZ(legBackRight1, 21.540659F, legBackRight1.rotateAngleX);
		legBackRight2.rotateAngleX = legsMovement2 / 2.0F + legBackRight2.firstRotateAngleX;

		legBackLeft1.rotateAngleX = legsMovement1 + legBackLeft1.firstRotateAngleX;
		legBackLeft2.pinLegPlaneYZ(legBackLeft1, 21.540659F, legBackLeft1.rotateAngleX);
		legBackLeft2.rotateAngleX = legsMovement1 / 2.0F + legBackLeft2.firstRotateAngleX;
		
		tail1.rotateAngleX = tail1.firstRotateAngleX;
		tail2.rotateAngleX = tailNaturalMovement + tail2.firstRotateAngleX;
		tail3.resetAllParameters();
		tail3.pinTailPlaneYZ(tail2, 12.001667F, tail2.rotateAngleX);
		tail3.rotateAngleX = tailNaturalMovement + tail3.firstRotateAngleX;
		tailHair1.copyAllRotationPoints(tail3);
		tailHair1.rotateAngleX = tailNaturalMovement + tailHair1.firstRotateAngleX;
		tailHair2.copyAllRotationPoints(tail3);
		tailHair2.rotateAngleX = tailNaturalMovement + tailHair2.firstRotateAngleX;
	}

	public void animate(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
		animator.update((IAnimatedEntity) entity);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);

		animator.setAnim(BygoneAgeAnimationIDs.ANIMATION_HEADBUTT.getAnimationID());
		animator.startPhase(7);
		animator.rotate(head1, PI / 3F, 0F, 0F);
		animator.rotate(head2, PI / 3F, 0F, 0F);
		animator.rotate(earLeft, PI / 3F, 0F, 0F);
		animator.rotate(earRight, PI / 3F, 0F, 0F);
		animator.rotate(mouth1, PI / 3F, 0F, 0F);
		animator.rotate(mouth2, PI / 3F, 0F, 0F);
		animator.rotate(mouthLeft, PI / 3F, 0F, 0F);
		animator.rotate(mouthRight, PI / 3F, 0F, 0F);
		animator.rotate(tuskLeft1, PI / 3F, 0F, 0F);
		animator.rotate(tuskLeft2, PI / 3F, 0F, 0F);
		animator.rotate(tuskRight1, PI / 3F, 0F, 0F);
		animator.rotate(tuskRight2, PI / 3F, 0F, 0F);
		animator.rotate(trunk1, PI / 3F, 0F, 0F);
		animator.rotate(trunk2, PI / 3F, 0F, 0F);
		animator.rotate(trunk3, PI / 3F, 0F, 0F);
		animator.rotate(trunk4, PI / 3F, 0F, 0F);
		animator.rotate(trunk5, PI / 3F, 0F, 0F);
		animator.endPhase();
		animator.setStationaryPhase(3);
		animator.startPhase(3);
		animator.rotate(head1, -PI / 2F, 0F, 0F);
		animator.rotate(head2, -PI / 2F, 0F, 0F);
		animator.rotate(earLeft, -PI / 2F, 0F, 0F);
		animator.rotate(earRight, -PI / 2F, 0F, 0F);
		animator.rotate(mouth1, -PI / 2F, 0F, 0F);
		animator.rotate(mouth2, -PI / 2F, 0F, 0F);
		animator.rotate(mouthLeft, -PI / 2F, 0F, 0F);
		animator.rotate(mouthRight, -PI / 2F, 0F, 0F);
		animator.rotate(tuskLeft1, -PI / 2F, 0F, 0F);
		animator.rotate(tuskLeft2, -PI / 2F, 0F, 0F);
		animator.rotate(tuskRight1, -PI / 2F, 0F, 0F);
		animator.rotate(tuskRight2, -PI / 2F, 0F, 0F);
		animator.rotate(trunk1, -PI / 2F, 0F, 0F);
		animator.rotate(trunk2, -PI / 2F, 0F, 0F);
		animator.rotate(trunk3, -PI / 2F, 0F, 0F);
		animator.rotate(trunk4, -PI / 2F, 0F, 0F);
		animator.rotate(trunk5, -PI / 2F, 0F, 0F);
		animator.endPhase();
		animator.resetPhase(2);
	}
}
